require 'rails_helper'
require 'support/request_helpers'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EmployeesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Employee. As you add validations to Employee, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for :employee
  }

  let(:invalid_attributes) {
    # attributes_for :invalid_employee
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EmployeesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "Authenticated" do
    include RequestHelpers

    before(:each) { login }

    describe "GET index" do
      it "should assign logged user employees as @employees" do
        employee = create(:employee, user: @user)
        get :index, {}, valid_session
        expect(assigns(:employees)).to eq [employee]
      end

      it "should not show other user's employees" do
          client = create(:employee)
          get :index, {}, valid_session
          expect(assigns(:employees)).to eq []
        end
    end

    describe "GET show" do
      it "assigns the requested employee as @employee" do
        employee = create(:employee)
        get :show, {:id => employee.to_param}, valid_session
        expect(assigns(:employee)).to eq employee
      end

      it "should not show other user's employees" do
        employee = create(:employee)
        bypass_rescue
        expect{
          get :show, {:id => employee.to_param}, valid_session
        }.to raise_error Pundit::NotAuthorizedError
      end
    end

    describe "GET new" do
      it "assigns a new employee as @employee" do
        get :new, {}, valid_session
        expect(assigns(:employee)).to be_a_new Employee
      end
    end

    describe "GET edit" do
      it "assigns the requested employee as @employee" do
        employee = create(:employee)
        get :edit, {:id => employee.to_param}, valid_session
        expect(assigns(:employee)).to eq employee
      end

      it "should not allow to edit other user's employees" do
          employee = create(:employee)
          bypass_rescue
          expect{
            get :edit, {:id => employee.to_param}, valid_session
          }.to raise_error Pundit::NotAuthorizedError
        end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Employee" do
          expect {
            post :create, {:employee => valid_attributes}, valid_session
          }.to change(Employee, :count).by(1)
        end

        it "assigns a newly created employee as @employee" do
          post :create, {:employee => valid_attributes}, valid_session
          expect(assigns(:employee)).to be_a Employee
          expect(assigns(:employee)).to be_persisted
        end

        it "redirects to the created employee" do
          post :create, {:employee => valid_attributes}, valid_session
          expect(response).to redirect_to Employee.last
        end
      end

      describe "with invalid params" do
        before(:each) { expect(controller.request).to receive(:referrer).and_return('http://test.host/employees/new') }

        it "should re-direct to the new employee path" do
          post :create, {:employee => invalid_attributes}, valid_session
          expect(response).to redirect_to new_employee_path
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          attributes_for(:employee, first_name: "Changed")
        }

        it "should update the requested employee" do
          employee = create(:employee, user: @user)
          put :update, {:id => employee.to_param, :employee => new_attributes}, valid_session
          employee.reload
          expect(employee.reload.first_name).to eq "Changed"
        end

        it "should assign the requested employee as @employee" do
          employee = create(:employee, user: @user)
          put :update, {:id => employee.to_param, :employee => valid_attributes}, valid_session
          expect(assigns(:employee)).to eq employee
        end

        it "should redirect to the employee" do
          employee = create(:employee, user: @user)
          put :update, {:id => employee.to_param, :employee => valid_attributes}, valid_session
          expect(response).to redirect_to employee
        end
      end

      describe "with invalid params" do
        it "assigns the employee as @employee" do
          employee = create(:employee, user: @user)
          put :update, {:id => employee.to_param, :employee => invalid_attributes}, valid_session
          expect(assigns(:employee)).to eq employee
        end

        # it "re-renders the 'edit' template" do
        #   employee = create(:employee)
        #   put :update, {:id => employee.to_param, :employee => invalid_attributes}, valid_session
        #   expect(response).to render_template("edit")
        # end
      end
    end

    describe "DELETE destroy" do
      it "should destroy the requested employee" do
        employee = create(:employee, user: @user)
        expect {
          delete :destroy, {:id => employee.to_param}, valid_session
        }.to change(Employee, :count).by(-1)
      end

      it "should redirect to the employees list" do
        employee = create(:employee, user: @user)
        delete :destroy, {:id => employee.to_param}, valid_session
        expect(response).to redirect_to(employees_url)
      end

      it "should not allow to delete other user's employees" do
        employee = create(:employee)
        bypass_rescue
        expect{
          delete :destroy, {:id => employee.to_param}
        }.to raise_error Pundit::NotAuthorizedError
      end
    end
  end
end